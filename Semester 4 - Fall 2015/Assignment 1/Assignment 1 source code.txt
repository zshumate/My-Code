//Assignment 1: 1.14
//Zachary Shumate
//9-11-2015
//CECS 302-01

#include <iostream>
#include <functional>

using namespace std;

template <typename Comparable>
class OrderedCollection{
	public:
		bool isEmpty(){
			if (sizeof(array) == 0){
				return true;
			}
			else{
				return false;
			}
		}
		
		void makeEmpty(){
			if (sizeof(array) != 0){
				for (int i = 0; i < sizeof(array); i++){
					array[i] = NULL;
				}
			}
		}
		
		void insert(Comparable item){
			array[sizeof(array)] = item;
		}
		
		void remove(int index){
			array[index] = NULL;
		}
		
		template <typename Object, typename Comparator>
		const Object & findMin(const Object a[], Comparator isGreaterThan){
			int maxIndex = 0;
			
			for(int i=1;i<sizeof(a);++i){
				if(isLessThan(a[maxIndex], a[i])){
					maxIndex = i;
				}
			}
			return a[maxIndex];
		}
		template <typename Object>
		const Object & findMin(const Object a[]){
			return findMin(a, greater<Object>{});
		}
		
		template <typename Object, typename Comparator>
		const Object & findMax(const Object a[], Comparator isLessThan){
			int maxIndex = 0;
			
			for(int i=1;i<sizeof(a);++i){
				if(isLessThan(a[maxIndex], a[i])){
					maxIndex = i;
				}
			}
			return a[maxIndex];
		}
		template <typename Object>
		const Object & findMax(const Object a[]){
			return findMax(a, less<Object>{});
		}
	private:
		Comparable array[];
};




//Assignment 1: 1.15
//Zachary Shumate
//9-11-2015
//CECS 302-01

#include <iostream>
using namespace std;

class Rectangle{
	public:
		Rectangle(int l=0, int w=0){
			length = l;
			width = w;
		}
		int getLength(){
			return length;
		}
		int getWidth(){
			return width;
		}
		
	private:
		int length;
		int width;
};

template <typename Object, typename Comparator>
const Object & findMax(const Object a[], Comparator isLessThan){
	int maxIndex = 0;
	
	for(int i=1;i<sizeof(a);++i){
		if(isLessThan(a[maxIndex], a[i])){
			maxIndex = i;
		}
	}
	return a[maxIndex];
}

#include <functional>
template <typename Object>
const Object & findMax(const Object a[]){
	return findMax(a, less<Object>{});
}

main(){
	Rectangle r1 = Rectangle(5,5);
	Rectangle r2 = Rectangle(6,4);
	Rectangle r3 = Rectangle(3,7);
	Rectangle rectangles[] = {r1,r2,r3};
	int perimeter[] = {(r1.getLength()*2+r1.getWidth()*2),(r2.getLength()*2+r2.getWidth()*2),(r3.getLength()*2+r3.getWidth()*2)};
	int area[] = {(r1.getLength()*r1.getWidth()),(r2.getLength()*r2.getWidth()),(r3.getLength()*r3.getWidth())};
	cout << "Largest perimeter is: " << findMax(perimeter) << endl;
	cout << "Largest area is: " << findMax(area) << endl;
}




//Assignment 1: 1.16
//Zachary Shumate
//9-11-2015
//CECS 302-01

#include <iostream>
#include <vector>
#ifndef MATRIX_H
#define MATRIX_H

using namespace std;

template<typename Object>
class matrix{
	public: 
		matrix(int rows, int cols) : array(rows){
			for(auto & thisRow : array)
			thisRow.resize(cols, rows);
		}
		matrix(vector<vector<Object> > v) : array {v}{
		}
		matrix( vector<vector<Object> > && v) : array{std::move(v)}{
		}
		matrix(){
		}
		const vector<Object> & operator[] (int row) const{
			return array[row];
		}
		vector<Object> & operator[](int row){
			return array[row];
		}
		int numrows() const{
			return array.size();
		}
		int numcols() const{
			return numrows() ? array[0].size() : 0;
		}
		void resize(int r, int c ){
			this.numrows() = r; //sets number of rows in the matrix to desired number
			this.numcols() = c;
		}
	private:
		vector<vector<Object> > array;
};
#endif